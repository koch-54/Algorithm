# n * nのマスにn桁の素数を配置する。一マスに一桁分の数字を入れる。このとき行で見ても列で見ても素数になるのは何通りあるか。このとき行と列で同じ素数ができてはならない
# n = 3のときを考える

require 'prime'

primes = Prime.each(1000).select{|i| i >= 100}

prime_h = {0 => []}
# 先頭の桁でハッシュをつくる
primes.chunk{|i| i / 100}.each{|k, v|       # chunkはこの場合、条件の結果がkにはいり、その条件に合う要素がvに配列として入る
    prime_h[k] = v
}
# p prime_h
cnt = 0
primes.each{|r1|        # 1行目
    prime_h[r1 / 100].each{|c1|                 # 1列目の素数は1行目の素数の3桁目から始まる素数
        prime_h[r1 % 100 / 10].each{|c2|        # keyにはr1の10の位の数字が入り、2列目はそれを3桁目に持つ素数だからc2にはそれから始まる素数がある
            prime_h[r1 % 10].each{|c3|
                r2 = (c1 % 100 / 10) * 100 + (c2 % 100 / 10) * 10 + (c3 % 100 / 10)     # 2行目の数字は各行の2桁目(10の位)の数字を持つ
                r3 = (c1 % 10) * 100 + (c2 % 10) * 10 + (c3 % 10)
                if primes.include?(r2) && primes.include?(r3) then
                    cnt += 1 if [r1, r2, r3, c1, c2, c3].uniq.size == 6         # 行と列同じ素数ができるものはカウントしないから、重複をけしてサイズが6になる条件を入れる
                end
            }
        }
    }
}

puts cnt