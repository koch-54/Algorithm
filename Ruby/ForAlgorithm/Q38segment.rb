# スポーツの電光掲示板に使われる、セグメントディスプレイは7つのエリアのオン/オフで0~9までの数字を表現している。その7つのエリアのオン/オフを最小回数切り替えて、0~9までの数字を表現するとき何回になるか
# on/offの切り替えは2進数数で考える。このときに排他的論理和をつかう
# ビットが1の時に点灯、0の時に消灯することとする
#   ---------- セグメントディスプレイ ------------
#                       A
#                   F       B
#                       G
#                   E       C
#                       D


# 0 ~ 9を表すbitを定義する
bit = [0b1111110, 0b0110000, 0b1101101, 0b1111001, 0b0110011,
       0b1011011, 0b1011111, 0b1110000, 0b1111111, 0b1111011] # 0bはバイナリリテラルを指定するための接頭辞 リテラルは数値や文字列を直接記述したもの

# 毎回全bitを反転させた値を初期値にする
min = 63        # 7bitを9回反転させるので、7 * 9 = 63
(0..9).to_a.permutation.each{|seq|
    sum = 0
    (seq.size - 1).times{|j|
        # ^ で前後の排他的論理和を計算する。
        sum += (bit[seq[j]]^bit[seq[j + 1]]).to_s(2).count("1")   # 変化してたら1が変化してなかったら0が返ってくるので、1をカウント
        break if min <= sum    # 暫定minよりもsumが多きくなった時点で、最小の条件を満たさないので、ループをぬけて次の順列の配列を見る
    }
    min = sum if min > sum    
}
puts min